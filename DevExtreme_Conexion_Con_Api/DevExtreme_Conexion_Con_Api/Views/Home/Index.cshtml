@using DevExtreme_Conexion_Con_Api.Models

@{
    ViewBag.Title = "Index";
}
<h2>----------------------------------------------------------------------------------------------------</h2>
<h2>Apartado de Tecnologia</h2>
<h2> </h2>
<h2>Computadoras</h2>
@(Html.DevExtreme().DataGrid<DevExtreme_Conexion_Con_Api.Models.Tecnologia.Computadoras>()
    .DataSource(ds => ds.WebApi()
        .RouteName("ComputadorasApi")
        .LoadAction("Get")
        .InsertAction("Post")
        .UpdateAction("Put")
        .DeleteAction("Delete")
        .Key("Id")
    )
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.Id).Visible(false).AllowEditing(false);

        columns.AddFor(m => m.marca);

        columns.AddFor(m => m.modelo);

        columns.AddFor(m => m.procesador);

        columns.AddFor(m => m.bateria);

        columns.AddFor(m => m.rom);

        columns.AddFor(m => m.ram);

        columns.AddFor(m => m.codigo);
    })
                                            .Editing(e =>
    {
        e.Mode(GridEditMode.Batch);
        e.AllowAdding(true);
        e.AllowUpdating(true);
        e.AllowDeleting(true);
    })
.Paging(p => p.PageSize(10))
.FilterPanel(f => f.Visible(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(f => f.Visible(true))
.Summary(s => s
    .TotalItems(totalItems =>
    {
        totalItems.AddFor(m => m.codigo).SummaryType(SummaryType.Count);
    })
    .GroupItems(groupItems =>
    {
        groupItems.Add().SummaryType(SummaryType.Count);
    })
    )
)



<h2>Celular</h2>
@(Html.DevExtreme().DataGrid<DevExtreme_Conexion_Con_Api.Models.Tecnologia.Celular>()
    .DataSource(ds => ds.WebApi()
        .RouteName("CelularApi")
        .LoadAction("Get")
        .InsertAction("Post")
        .UpdateAction("Put")
        .DeleteAction("Delete")
        .Key("Id")
    )
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.Id).Visible(false).AllowEditing(false);

        columns.AddFor(m => m.marca);

        columns.AddFor(m => m.modelo);

        columns.AddFor(m => m.procesador);

        columns.AddFor(m => m.bateria);

        columns.AddFor(m => m.rom);

        columns.AddFor(m => m.ram);

        columns.AddFor(m => m.codigo);
    })
                                        .Editing(e =>
    {
        e.Mode(GridEditMode.Batch);
        e.AllowAdding(true);
        e.AllowUpdating(true);
        e.AllowDeleting(true);
    })
.Paging(p => p.PageSize(10))
.FilterPanel(f => f.Visible(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(f => f.Visible(true))
.Summary(s => s
    .TotalItems(totalItems =>
    {
        totalItems.AddFor(m => m.codigo).SummaryType(SummaryType.Count);
    })
    .GroupItems(groupItems =>
    {
        groupItems.Add().SummaryType(SummaryType.Count);
    })
    )
)

<h2>----------------------------------------------------------------------------------------------------</h2>
<h2>Apartado de Internet Residencial</h2>
<h2></h2>
<h2>Fibra Optica</h2>
@(Html.DevExtreme().DataGrid<DevExtreme_Conexion_Con_Api.Models.Internet_Residencial.Fibra_Optica>()
    .DataSource(ds => ds.WebApi()
        .RouteName("Fibra_OpticaApi")
        .LoadAction("Get")
        .InsertAction("Post")
        .UpdateAction("Put")
        .DeleteAction("Delete")
        .Key("Id")
    )
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.Id).AllowEditing(false);

        columns.AddFor(m => m.velocidad);

        columns.AddFor(m => m.tipo);

        columns.AddFor(m => m.costo);
    })
                                    .Editing(e =>
    {
        e.Mode(GridEditMode.Batch);
        e.AllowAdding(true);
        e.AllowUpdating(true);
        e.AllowDeleting(true);
    })
.Paging(p => p.PageSize(10))
.FilterPanel(f => f.Visible(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(f => f.Visible(true))
.Summary(s => s
    .TotalItems(totalItems =>
    {
        totalItems.AddFor(m => m.Id).SummaryType(SummaryType.Count);
    })
    .GroupItems(groupItems =>
    {
        groupItems.Add().SummaryType(SummaryType.Count);
    })
    )
)



<h2>Antena Satelital</h2>
@(Html.DevExtreme().DataGrid<DevExtreme_Conexion_Con_Api.Models.Internet_Residencial.Antena_Satelital>()
    .DataSource(ds => ds.WebApi()
        .RouteName("Antena_SatelitalApi")
        .LoadAction("Get")
        .InsertAction("Post")
        .UpdateAction("Put")
        .DeleteAction("Delete")
        .Key("Id")
    )
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.Id).AllowEditing(false);

        columns.AddFor(m => m.velocidad);

        columns.AddFor(m => m.tipo);

        columns.AddFor(m => m.costo);
    })
                                .Editing(e =>
    {
        e.Mode(GridEditMode.Batch);
        e.AllowAdding(true);
        e.AllowUpdating(true);
        e.AllowDeleting(true);
    })
.Paging(p => p.PageSize(10))
.FilterPanel(f => f.Visible(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(f => f.Visible(true))
.Summary(s => s
    .TotalItems(totalItems =>
    {
        totalItems.AddFor(m => m.velocidad).SummaryType(SummaryType.Count);
    })
    .GroupItems(groupItems =>
    {
        groupItems.Add().SummaryType(SummaryType.Count);
    })
    )
)

<h2>----------------------------------------------------------------------------------------------------</h2>
<h2>Apartado de Cable</h2>
<h2></h2>
<h2>Cable de servicio Premium</h2>
@(Html.DevExtreme().DataGrid<DevExtreme_Conexion_Con_Api.Models.Cable.Cbl_Premium>()
    .DataSource(ds => ds.WebApi()
        .RouteName("Cbl_PremiumApi")
        .LoadAction("Get")
        .InsertAction("Post")
        .UpdateAction("Put")
        .DeleteAction("Delete")
        .Key("Id")
    )
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.Id).AllowEditing(false);

        columns.AddFor(m => m.canalesAnalogos);

        columns.AddFor(m => m.canalesDigitales);

        columns.AddFor(m => m.canalesPremium);

        columns.AddFor(m => m.precio);
    })
                            .Editing(e =>
    {
        e.Mode(GridEditMode.Batch);
        e.AllowAdding(true);
        e.AllowUpdating(true);
        e.AllowDeleting(true);
    })
.Paging(p => p.PageSize(10))
.FilterPanel(f => f.Visible(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(f => f.Visible(true))
.Summary(s => s
    .TotalItems(totalItems =>
    {
        totalItems.AddFor(m => m.Id).SummaryType(SummaryType.Count);
    })
    .GroupItems(groupItems =>
    {
        groupItems.Add().SummaryType(SummaryType.Count);
    })
    )
)


<h2>Cable de servicio basico</h2>
@(Html.DevExtreme().DataGrid<DevExtreme_Conexion_Con_Api.Models.Cable.Cbl_Normal>()
    .DataSource(ds => ds.WebApi()
        .RouteName("Cbl_NormalApi")
        .LoadAction("Get")
        .InsertAction("Post")
        .UpdateAction("Put")
        .DeleteAction("Delete")
        .Key("Id")
    )
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.Id).AllowEditing(false);

        columns.AddFor(m => m.canalesAnalogos);

        columns.AddFor(m => m.canalesDigitales);

        columns.AddFor(m => m.canalesPremium);

        columns.AddFor(m => m.precio);
    })
                        .Editing(e =>
    {
        e.Mode(GridEditMode.Batch);
        e.AllowAdding(true);
        e.AllowUpdating(true);
        e.AllowDeleting(true);
    })
.Paging(p => p.PageSize(10))
.FilterPanel(f => f.Visible(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(f => f.Visible(true))
.Summary(s => s
    .TotalItems(totalItems =>
    {
        totalItems.AddFor(m => m.Id).SummaryType(SummaryType.Count);
    })
    .GroupItems(groupItems =>
    {
        groupItems.Add().SummaryType(SummaryType.Count);
    })
    )
)

<h2>----------------------------------------------------------------------------------------------------</h2>
<h2>Apartado de Cable mas Internet Residencial</h2>
<h2>Cable mas Internet plan Premium</h2>
@(Html.DevExtreme().DataGrid<DevExtreme_Conexion_Con_Api.Models.Cable_Internet.Cable_Internet_Premium>()
    .DataSource(ds => ds.WebApi()
        .RouteName("Cable_Internet_PremiumApi")
        .LoadAction("Get")
        .InsertAction("Post")
        .UpdateAction("Put")
        .DeleteAction("Delete")
        .Key("Id")
    )
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.Id).AllowEditing(false).Visible(false);

        columns.AddFor(m => m.fibraOpticaId);

        columns.AddFor(m => m.cableId);
    })
                    .Editing(e =>
                    {
                        e.Mode(GridEditMode.Batch);
                        e.AllowAdding(true);
                        e.AllowUpdating(true);
                        e.AllowDeleting(true);
                    })
.Paging(p => p.PageSize(10))
.FilterPanel(f => f.Visible(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(f => f.Visible(true))
.Summary(s => s
    .TotalItems(totalItems =>
    {
        totalItems.AddFor(m => m.Id).SummaryType(SummaryType.Count);
    })
    .GroupItems(groupItems =>
    {
        groupItems.Add().SummaryType(SummaryType.Count);
    })
    )
)


<h2>Cable mas Internet plan Basico</h2>
@(Html.DevExtreme().DataGrid<DevExtreme_Conexion_Con_Api.Models.Cable_Internet.Cable_Internet_Basico>()
    .DataSource(ds => ds.WebApi()
        .RouteName("Cable_Internet_BasicoApi")
        .LoadAction("Get")
        .InsertAction("Post")
        .UpdateAction("Put")
        .DeleteAction("Delete")
        .Key("Id")
    )
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.Id).AllowEditing(false).Visible(false);

        columns.AddFor(m => m.antenaSatelitalId);

        columns.AddFor(m => m.cableId);
    })
                .Editing(e =>
                {
                    e.Mode(GridEditMode.Batch);
                    e.AllowAdding(true);
                    e.AllowUpdating(true);
                    e.AllowDeleting(true);
                })
.Paging(p => p.PageSize(10))
.FilterPanel(f => f.Visible(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(f => f.Visible(true))
.Summary(s => s
    .TotalItems(totalItems =>
    {
        totalItems.AddFor(m => m.Id).SummaryType(SummaryType.Count);
    })
    .GroupItems(groupItems =>
    {
        groupItems.Add().SummaryType(SummaryType.Count);
    })
    )
)

<h2>----------------------------------------------------------------------------------------------------</h2>
<h2>Apartado de Red Movil</h2>
<h2></h2>



<h2>Internet Ilimitado</h2>
@(Html.DevExtreme().DataGrid<DevExtreme_Conexion_Con_Api.Models.Recarga.Internet_Ilimitado>()
    .DataSource(ds => ds.WebApi()
        .RouteName("Internet_IlimitadoApi")
        .LoadAction("Get")
        .InsertAction("Post")
        .UpdateAction("Put")
        .DeleteAction("Delete")
        .Key("Id")
    )
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.Id).AllowEditing(false).Visible(false);

        columns.AddFor(m => m.precio);

        columns.AddFor(m => m.vigencia);
    })
        .Editing(e =>
        {
            e.Mode(GridEditMode.Batch);
            e.AllowAdding(true);
            e.AllowUpdating(true);
            e.AllowDeleting(true);
        })
.Paging(p => p.PageSize(10))
.FilterPanel(f => f.Visible(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(f => f.Visible(true))
.Summary(s => s
    .TotalItems(totalItems =>
    {
        totalItems.AddFor(m => m.Id).SummaryType(SummaryType.Count);
    })
    .GroupItems(groupItems =>
    {
        groupItems.Add().SummaryType(SummaryType.Count);
    })
    )
)



<h2>SuperPack</h2>

@(Html.DevExtreme().DataGrid<DevExtreme_Conexion_Con_Api.Models.Recarga.SuperPack>()
    .DataSource(ds => ds.WebApi()
        .RouteName("SuperPacksApi")
        .LoadAction("Get")
        .InsertAction("Post")
        .UpdateAction("Put")
        .DeleteAction("Delete")
        .Key("Id")
    )
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.Id).AllowEditing(false).Visible(false);

        columns.AddFor(m => m.datos);

        columns.AddFor(m => m.redesSociales);

        columns.AddFor(m => m.precio);

        columns.AddFor(m => m.vigencia);
    })
    .Editing(e =>
    {
        e.Mode(GridEditMode.Batch);
        e.AllowAdding(true);
        e.AllowUpdating(true);
        e.AllowDeleting(true);
    })
.Paging(p => p.PageSize(10))
.FilterPanel(f => f.Visible(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(f => f.Visible(true))
.Summary(s => s
    .TotalItems(totalItems =>
    {
        totalItems.AddFor(m => m.datos).SummaryType(SummaryType.Count);
    })
    .GroupItems(groupItems =>
    {
        groupItems.Add().SummaryType(SummaryType.Count);
    })
)

)

<h2>----------------------------------------------------------------------------------------------------</h2>
<h2>Apartado de Clientes</h2>
<h2></h2>

<h2>Clientes</h2>
@(Html.DevExtreme().DataGrid<DevExtreme_Conexion_Con_Api.Models.Cliente>
    ()
    .DataSource(ds => ds.WebApi()
    .RouteName("ClientesApi")
    .LoadAction("Get")
    .InsertAction("Post")
    .UpdateAction("Put")
    .DeleteAction("Delete")
    .Key("id")
    )
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.nombre);

        columns.AddFor(m => m.id).AllowEditing(false).Visible(false);

        columns.AddFor(m => m.numero);

        columns.AddFor(m => m.seUnio);
    })
    .Editing(e =>
    {
        e.Mode(GridEditMode.Form);
        e.AllowAdding(true);
        e.AllowUpdating(true);
        e.AllowDeleting(true);
    })
    .Paging(p => p.PageSize(10))
    .FilterPanel(f => f.Visible(true))
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(f => f.Visible(true))
    .Summary(s => s
    .TotalItems(totalItems =>
    {
        totalItems.AddFor(m => m.nombre).SummaryType(SummaryType.Count);
    })
    .GroupItems(groupItems =>
    {
        groupItems.Add().SummaryType(SummaryType.Count);
    })
)




    )
